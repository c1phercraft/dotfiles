#
# Bash custom prompt.
#

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

source ~/.bash_colors

# Set a fancy prompt (non-color, unless we know we "want" color)
color_prompt=
case "$TERM" in
  xterm-color) color_prompt=yes;;
  xterm) color_prompt=yes;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt=yes
fi

echo_right() {
  local line=$1
  columns="$(tput cols)"
  printf "%*s" $columns "$line"
}


update_prompt() {
  local LAST_RESULT=$?
  local START_CAP=''
  local END_CAP=''
  
  # Day and time.
  PS1="\n\[$FG_LIGHTGRAY\]$START_CAP\[$TXT_NC$FG_BLACK$BG_LIGHTGRAY\]\D{%d}\[$TXT_NC$FG_LIGHTGRAY\]$END_CAP"
  PS1+="\[$FG_BLUE\]$START_CAP\[$FG_BLACK$BG_BLUE\]\D{%H%M}\[$TXT_NC$FG_BLUE\]$END_CAP"

  # Number of jobs.
  PS1+="\[$FG_LIGHTGRAY\]$START_CAP\[$FG_BLACK$BG_LIGHTGRAY\]\j\[$TXT_NC$FG_LIGHTGRAY\]$END_CAP"

  # User and host.
  PS1+="\[$FG_BLUE\]$START_CAP\[$FG_BLACK$BG_BLUE\]\u@\h\[$TXT_NC$FG_BLUE\]$END_CAP"

  # Current working directory.
  PS1+="\[$FG_YELLOW\]$START_CAP\[$FG_BLACK$BG_YELLOW\]\w\[$TXT_NC$FG_YELLOW\]$END_CAP"
  
  if `git rev-parse --is-inside-work-tree 2> /dev/null`; then
    # x  act ∙ there are untracked files? ∴
    # x  act ⇧ modified files
    # x  act × deleted files without using git rm
    # x  act ⬆ there are staged files / files can be committed
    #        --v
    # x        ⌅ rebase in progress
    # x        ⌆ merge in progress
    # -----------------------------------------------------------
    # x      ↑ number of commits ahead
    #        --v
    # x  act   » fast forward
    # x  act   ⇥ push
    # x        ◇ branch is only local
    # x        ◆ branch is also remote
    # x  act   ⌥ diverged
    # x  act   ☠ detached head
    # x      ↓ number of commits behind
    # x       current_branch

    local ICON_UNTRACKED='∙'
    local ICON_UNSTAGED='⇧' #↥
    local ICON_STAGED='⬆' #⤒
    local ICON_DELETED='×'
    local ICON_MERGING='⌆' #ᛣ
    local ICON_REBASING='⌅' #⇈
    local ICON_AHEAD='↑' #⇡
    local ICON_BEHIND='↓' #⇣
    local ICON_DETACHED='☠'
    local ICON_REMOTE='◆'
    local ICON_LOCAL='◇'
    local ICON_PUSH='⇪' #⇥
    local ICON_DIVERGED='⌥'
    local ICON_FF='»'

    add_state() {
      local icon=$1
      local is_active=$2
      local suffix="${3:-}"

      if [[ -n $is_active ]]; then
        PS1+="\[$ACTIVE\]"
      else
        PS1+="\[$INACTIVE\]"
      fi
      PS1+=" $icon$suffix"
    }

    add_action() {
      local BUP=$ACTIVE
      ACTIVE="\[$FG_RED_BRIGHT\]"
      add_state $@
      ACTIVE="\[$BUP\]"
    }

    # Set local colors.
    local ACTIVE="\[$FG_GREEN_BRIGHT\]"
    local INACTIVE="\[$FG_BLACK\]"
    PS1+="\[$TXT_NC$FG_DARKGRAY\]$START_CAP\[$TXT_NC$FG_WHITE$BG_DARKGRAY\]"

    # Inside a Git repo, so add more information.
    local GIT_DIR=$(git rev-parse --git-dir 2> /dev/null)
    local STATUS=$(git status --porcelain 2> /dev/null)

    if [[ $STATUS =~ ($'\n'|^)\?\? ]]; then local HAS_UNTRACKED=true; fi
    if [[ $STATUS =~ ($'\n'|^).M ]]; then local HAS_UNSTAGED=true; fi
    if [[ $STATUS =~ ($'\n'|^)[MAD] ]]; then local HAS_STAGED=true; fi
    if [[ $STATUS =~ ($'\n'|^).D ]]; then local HAS_DELETED=true; fi
    if git rebase --show-current-patch 2> /dev/null; then local IS_REBASING=true; fi
    if [[ -n $GIT_DIR && -r "$GIT_DIR/MERGE_HEAD" ]]; then local IS_MERGING=true; fi

    # Commits that are not pushed to remote yet.
    local NUM_AHEAD=$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')
    if [ $NUM_AHEAD -gt 0 ]; then
      local IS_AHEAD=true
    else
      NUM_AHEAD=
    fi

    # Commits on remote that have not been pulled yet.
    local NUM_BEHIND=$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')
    if [ $NUM_BEHIND -gt 0 ]; then
      local IS_BEHIND=true
    else
      NUM_BEHIND=
    fi

    # Local branch.
    local BRANCH=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [[ $BRANCH == 'HEAD' ]]; then local IS_DETACHED=true; fi
    # Remote branch.
    local REMOTE_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref @{upstream} 2> /dev/null)
    if [[ -n "$REMOTE_BRANCH" && "$REMOTE_BRANCH" != "@{upstream}" ]]; then local HAS_REMOTE_BRANCH=true; fi
    local NEEDS_REBASE=$(git config --get branch.$BRANCH.rebase 2> /dev/null)

    # Construct the prompt.
    add_state $ICON_UNTRACKED $HAS_UNTRACKED
    add_state $ICON_UNSTAGED $HAS_UNSTAGED
    if [[ -n $HAS_DELETED ]]; then
      add_action $ICON_DELETED $HAS_DELETED
    else
      add_state $ICON_DELETED $HAS_DELETED
    fi
    add_state $ICON_STAGED $HAS_STAGED
    if [[ -n $IS_REBASING || -n $IS_MERGING ]]; then
      # Only show one of the states: rebasing or merging.
      if [[ -n $IS_REBASING ]]; then
        add_state $ICON_REBASING $IS_REBASING
      else
        add_state $ICON_MERGING $IS_MERGING
      fi
    fi
    PS1+="\[$INACTIVE\] " # Separating local from remote territory.
    add_state $ICON_AHEAD $IS_AHEAD $NUM_AHEAD
    if [[ -n $IS_DETACHED ]]; then
      add_action $ICON_DETACHED true
    elif [[ -n $IS_AHEAD && -n $IS_BEHIND ]]; then
      add_action $ICON_DIVERGED true
    elif [[ -n $IS_BEHIND && ! -n $NEEDS_REBASE ]]; then
        add_state $ICON_FF true
    elif [[ -n $HAS_REMOTE_BRANCH ]]; then
      if [[ -n $IS_AHEAD ]]; then
        add_state $ICON_PUSH true
      else
        add_state $ICON_REMOTE
      fi
    else
      add_state $ICON_LOCAL
    fi
    add_state $ICON_BEHIND $IS_BEHIND $NUM_BEHIND
    PS1+="\[$INACTIVE\]  \[$TXT_ITALIC\]$BRANCH \[$TXT_NC$FG_DARKGRAY\]$END_CAP" # 

    # Terminal title shows current repo.
    local ROOT_PATH=$(git rev-parse --show-toplevel 2> /dev/null)
    ROOT_PATH=$(basename $ROOT_PATH)
    set_title $ROOT_PATH
  else
    set_title "Terminal"
  fi
  
  # Actual prompt.
  PS1+="$TXT_NC\n"
  if [ $LAST_RESULT == 0 ]; then
    PS1+="\[$FG_GREEN\]:o)"
  else
    PS1+="\[$FG_RED\]:o("
  fi
  PS1+="\[$FG_GRAY_BRIGHT\]\$\[$TXT_NC\] "
}

if [ "$color_prompt" = "yes" ]; then
  shopt -u promptvars
  PROMPT_COMMAND=update_prompt
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

#PROMPT_DIRTRIM=5
unset color_prompt

