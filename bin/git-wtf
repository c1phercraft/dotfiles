#!/usr/bin/env bash

# Git script to show the current state of your branch:
# - Which branch you are on.
# - The history of branch-off points.
# - How much ahead those previous branches are.
# - A list of summaries of ahead commits in previous branches.
# - The upstream for each branch.
# - Whether there are untracked files.
# - Whether there are uncommitted staged changes.

source ~/.bash_colors

[[ " $* " == *" -s "* ]] && short=true

current_branch=$(git rev-parse --abbrev-ref HEAD)

# Returns the name of the main trunk: main OR master.
get_trunk() {
    git branch --list main master | awk '{print $NF}'
}

# Returns all parent branches of the HEAD, including itself.
relevant_branches() {
	# This will list the parent branches up to, but not including, main/master.
	# Order is by date of last commit on the branch, so it may not be in order of branching!
	git branch --format="%(refname:short)" --contains `git rev-parse HEAD~1` --sort=-creatordate 2> /dev/null
}

# Returns the key of the given value that's part of the given hashmap.
key_of() {
    local -n hashmap=$1
    local value=$2
    for key in "${!hashmap[@]}"; do
        if [[ "${hashmap[$key]}" == "$value" ]]; then
            echo $key
            break
        fi
    done
}

# Returns a string, defining the state of the first argument, compared to the second.
behind_ahead() {
    local first=$1
    local second=$2
    local colon="$TXT_NC:"
    read behind ahead <<< $(git rev-list --left-right --count $first...$second 2> /dev/null)
    if [[ behind -eq 0 ]]; then
        if [[ ahead -eq 0 ]]; then
            # 0|0 = synched
#            echo "$colon${FG_GREEN_BRIGHT}SYNC$TXT_NC"
            echo ""
        else
            # 0|+ = ahead
            echo "$colon+$ahead"
        fi
    else
        if [[ ahead -eq 0 ]]; then
            # +|0 = behind
            echo "$colon-$behind"
        else
            # +|+ = diverged
            echo "$colon${FG_RED}DIVERGED$TXT_NC"
        fi
    fi
}

# Collect all relevant branches.
trunk=$(get_trunk)
branches="$trunk $(relevant_branches)"
branch_count=$(echo $branches | wc -w)

# Collect branch information.
declare -A branch_name
declare -A behind
declare -A forked
declare -A remote
for branch in $branches; do
    branch_name[$branch]=$branch
    forked[$branch]=$(git rev-parse --short $(git merge-base ${branch_name[$branch]} HEAD) 2> /dev/null)
    behind[$branch]=$(git log --oneline ${forked[$branch]}..$branch 2> /dev/null | wc -l)
    remote[$branch]=$(git rev-parse --abbrev-ref $branch@{upstream} 2> /dev/null)
done

# Determine topological order of commits to get to the current HEAD state.
ordered_shas=$(git rev-list --topo-order --reverse --abbrev-commit -$branch_count ${forked[@]} 2> /dev/null | grep -E "$(echo ${forked[@]} | tr ' ' '|')")
declare -i count
declare -a order
count=0
for sha in $ordered_shas; do
    order[$count]=$(key_of forked $sha)
    count+=1
done

# Pretty print output.
indent_size=$((${#forked[$current_branch]} - 1))
count=0
upstream_branch=
for branch in ${order[@]}; do
    #           1         2
    # 01234567890123456789012345
    #       :        :        :
    # b8536e5 ⟶ +1 (m:in)     :
    #       │    ╰─ 8:eb938 Mo:e changes on main - Author
    #       ╰⟶ cdee44e ⟶ +1 (B:
    #                │    ╰─ f:3e54c More changes on B - Author
    #                ╰⟶ f540184 (A)
    #
    # count=0:  6 -> 1 * 6 + 0 * 3 =  6
    # count=1: 15 -> 2 * 6 + 1 * 3 = 15
    # count=2: 24 -> 3 * 6 + 2 * 3 = 24
    # step_size=9 -> (count + 1) * indent_size, +(count * 3) if count != 0
    if [[ $count = 0 ]]; then
        # Trunk.
        line=""
        printf -v indent "% *s" $indent_size ""
    else
        # Branch.
        line="$indent╰⟶ "
        printf -v indent "% *s" $((($count * 3) + ($count + 1) * $indent_size)) ""
    fi
    
    # Fork point SHA.
    line+="$FG_GREEN$TXT_BOLD${forked[$branch]}$TXT_NC "
    
    # Situation                 Fork Point	Upstream Branch	Remote Branch   Show as
    # -------------------------+-----------+---------------+---------------+-------
    # Ahead of Fork Point	    Ahead	    --	            --              -99 at fork point
    # Synced with Fork Point	Synced	    --	            --              <nothing>
    # Behind Fork Point	        Behind	    --	            --              +99 at fork point
    # Ahead of Upstream	        --	        Ahead	        --              
    # Behind Upstream	        --	        Behind	        --              
    # Ahead and Behind Upstream	--	        Diverged	    --              DIVERGED UPSTREAM
    # Synced with Upstream	    --	        Synced	        --              <nothing>
    # No Upstream Configured	--	        None	        --              <nothing>
    # Ahead of Remote	        --	        --	            Ahead           
    # Behind Remote	            --	        --	            Behind          
    # Ahead and Behind Remote	--	        --	            Diverged        DIVERGED REMOTE
    # Synced with Remote	    --	        --	            Synced          <nothing>
    # No Remote Branch Exists	--	        --	            None            <nothing>
    # Detached HEAD	            Detached	--	            --              DETACHED
    # No Commits Yet	        None	    None	        None            <nothing>
    # Branch Deleted on Remote	--	        Deleted	        Deleted         

    if [[ $branch != $current_branch ]]; then
        # How many commits behind on this branch?
        line+="⟶ "
    fi
    
    # Branch, compared to fork point.
    line+="$FG_BROWN$TXT_BOLD($branch$(behind_ahead ${forked[$branch]} $branch)"
    
    # Branch, compared to remote.
    remote_branch=${remote[$branch]}
    if [[ -n $remote_branch ]]; then
        line+=" ◆ $FG_BLUE$remote_branch$(behind_ahead $remote_branch $branch)"
    fi
    line+="$FG_BROWN$TXT_BOLD)$TXT_NC"
    
    # Branch status line done.
    printf "$line\n"
    
    if [[ -z $short ]]; then
        # List of commits that the current branch is behind.
        commits=$(git log --pretty=format:"$indent│    ├─ $FG_GREEN%h$TXT_NC $FG_WHITE%s$TXT_NC - $FG_DARKGRAY%an$TXT_NC" ${forked[$branch]}..$branch 2> /dev/null)
        if [[ -n $commits ]]; then
            printf "${commits%├─*}╰─${commits##*├─}\n"
        fi
    fi

    count+=1
    upstream_branch=$branch
done

# Some less important end notes.
if [[ -n "$(git ls-files -m)" ]]; then
    echo "${FG_DARKGRAY}NOTE: there are unstaged modified files.$TXT_NC"
fi

if [[ -n "$(git diff-index --cached HEAD)" ]]; then
    echo "${FG_DARKGRAY}NOTE: there are staged but uncommitted files.$TXT_NC"
fi

